@import './ionic.functions.string.scss';

$css-variable-prefix:       '--';
$default-color-variation:   base;
$default-color-prefix:      color-;
$enable-css-variables:      true;
$css-variables:             ();

@mixin css-variables-to-root {
  :root {
    @each $name, $color in $css-variables {
      #{$name}: $color;
    }
  }
}

/**
  Parses a css variable string into its original name/variation pair
  @private
 */
@function css-variable-to-name-variation($variable) {
  // Determine the name of this color from the CSS Variable
  $index: str-index($variable, $default-color-prefix);
  $end-index: str-index($variable, ',');
  @if ($end-index == null) {
    $end-index: str-index($variable, ')');
  }
  $name: str-slice($variable, $index + str-length($default-color-prefix), $end-index - 1);
  $variation: $default-color-variation;

  // Determine if this CSS variable is itself a variation (e.g. primary-contrast)
  $extracted: str-split($name, '-');

  @if (length($extracted) > 1) {
    $name: nth($extracted, 1);
    $variation: nth($extracted, 2);
  }

  @return (name: $name, variation: $variation);
}

/**
  Parses a color into its name/variation pairs from the color map
  @private
 */
@function color-to-name-variation($colors, $color, $variation: null) {
  $results: ();
  $found: false;
  @each $color-name, $color-value in $colors {
    @if (not $found and type-of($color-value) == map) {
      @each $color-variation-name, $color-variation-value in $color-value {
        @if ($color == $color-variation-value) {
          $variation: if($variation == $color-variation-name, $default-color-variation, $variation);
          @if ($variation) {
            $results: map-merge($results, (variation: $variation))
          }
          $results: map-merge($results, (name: $color-name));
          $found: true;
        }
      }
    } @else if (not $found and $color == $color-value) {
      $results: map-merge($results, (name: $color-name));
      $found: true;
    }
  }

  @return $results;
}

@function css-var($color, $name, $mode: null) {
  @if ($enable-css-variables) {
    $is-reference: str-contains($color, $css-variable-prefix);
    $global-css-variable: #{$css-variable-prefix}#{$name};

    @if ($mode != null) {
      $mode-css-variable: #{$global-css-variable}-#{$mode};
      $css-variables: map-merge($css-variables, ($mode-css-variable: $color)) !global;
      $color: #{if($is-reference,'#{$color}','var(#{$global-css-variable}, #{$color})')};
      $color: "var(#{$mode-css-variable}, #{$color})";
    } @else {
      $css-variables: map-merge($css-variables, ($global-css-variable: $color)) !global;
      $color: "var(#{$global-css-variable}, #{$color})";
    }
  }
  @return unquote($color);
}

@function ion-color($colors, $name, $variation: null, $mode: null) {

  // If CSS variables are off, we will be passed color values
  // we need to look up the map in order to provide variations
  @if (type-of($name) == color) {
    $results: color-to-name-variation($colors, $name, $variation);
    @if (map-has-key($results, name)) {
      $name: map-get($results, name);
      @if (map-has-key($results, variation)) {
        $variation: map-get($results, variation);
      } @else {
        @if ($variation) {
          @warn "Color '#{$name}' does not exist in map. Unable to set to variation '#{$variation}'"
        }
        @return $name;
      }
    }
  }

  // Does the name contain the CSS Variable color prefix
  // If so this is this is a reference to a CSS variable
  @if (str-contains($name, $css-variable-prefix)) {
    // If there is no variation change, just return the css variable
    @if ($variation == null) {
      @return unquote($name);
    } @else {
      // Convert the CSS Variable into a name/variation pair
      $results: css-variable-to-name-variation($name);
      $name: map-get($results, name);
      $current-variation: map-get($results, variation);
      $variation: if($variation == $current-variation, $default-color-variation, $variation);
    }
  }

  $color: map-get($colors, $name);
  @if ($color) {
    // If there is no variation use the default
    $variation: if($variation == null, $default-color-variation, $variation);

    // If the color contains variations pick the appropriate one
    @if (type-of($color) == map) {
      @if (not map-has-key($color, $variation)) {
        @error "Unknown Color: '#{$name}' with variation '#{$variation}'. Using #{$default-color-variation}";
      }
      $color: map-get($color, $variation);
    } @else if $variation != $default-color-variation {
      @error "Color '#{$name}' is not a map. Cannot contain variation '#{$variation}'. Using #{$default-color-variation}";
    }

    $name: #{$default-color-prefix}#{$name};
    @if $variation != $default-color-variation {
      $name: "#{$name}-#{$variation}";
    }
    @return css-var($color, $name, $mode);
  }

  @error "Unknown Color: '#{$name}' with variation '#{$variation}'";
}

@function ion-extend-colors($parent, $children...) {
  $result: map-merge($parent, ());

  @each $child in $children {
    @each $key, $value in $child {
      @if type-of($value) == map {
        $obj: ();
        @if (map-has-key($result, $key)) {
          $obj: map-get($result, $key);

          @if (type-of($obj) == color) {
            $obj: (base: $obj);
          }
        }
        $result: map-merge($result, ($key: ion-extend-colors($obj, $value)));
      } @else {
        $result: map-merge($result, ($key: $value));
      }
    }
  }
  @return $result;
}
