@import "../../themes/ionic.globals";
// Progress bar
// --------------------------------------------------
:host {
    /**
     * @prop --height: Height of the progress bar
     * @prop --border-radius: Border Radius of the progress bar
     * @prop --bar-background: Background of the progress bar
     * @prop --bar-speed: Speed of the progress bar
     * @prop --buffer-background: Background of the buffer bar
     * @prop --buffer-size: Size of the buffer circles
     * @prop --buffer-speed: Speed of the buffer circles
     */
    --height: 4px;
    --border-radius: 2px;

    --bar-background: rgba(0, 0, 0, .12);
    --bar-speed: 2.1s;

    --buffer-background: rgba(0, 0, 0, .30);
    --buffer-size: 10px;
    --buffer-speed: 1.0s;

    overflow: hidden;
    box-sizing: border-box;
    display: block;
}

:host(.ion-color) {
    --color: #{current-color(base)};
    --bar-background: rgba(#{current-color(base-rgb)}, .12);
    --buffer-background: rgba(#{current-color(base-rgb)}, .30);
    --buffer-color: #{current-color(base)};
}

/** 
 * Source: https://github.com/Dogfalo/materialize/blob/v1-dev/sass/components/_global.scss
 * MIT LIcense
 **/

.progress-bar {
    overflow: hidden;
    box-sizing: border-box;
    display: block;
    position: relative;
    height: var(--height);
    width: 100%;
    background-color: var(--bar-background);
}

.progress {
    border-radius: var(--border-radius);
    background-color: var(--color);
}

.buffer-circles,
.buffer,
.buffer-bar {
    display: none;
}

:host(.determinate),
:host(.buffer) {
    .progress {
        position: absolute;
        top: 0;
        bottom: 0;
        transition: width .3s linear;
    }
    @include rtl() {
        transform: rotate(180deg);
    }
}

:host(.indeterminate),
:host(.query) {
    .progress {
        &:before {
            content: '';
            position: absolute;
            background-color: inherit;
            top: 0;
            left: 0;
            bottom: 0;
        }
    }
}

:host(.indeterminate) {
    .progress {
        &:before {
            will-change: left, right;
            animation: indeterminate var(--bar-speed) cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
        }
    }
}

:host(.query) {
    .progress {
        &:before {
            will-change: left, right;
            animation: query var(--bar-speed) cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
        }
    }
}

:host(.buffer) {
    .buffer {
        position: absolute;
        display: block;
        top: 0;
        z-index: -1;
        width: 100%;
        height: 100%;
        background-color: var(--buffer-background);
    }
    .buffer-bar {
        position: absolute;
        display: block;
        top: 0;
        z-index: -1;
        width: 100%;
        height: 100%;
        background-color: var(--ion-background-color, #fff);
    }
    .buffer-circles {
        position: absolute;
        top: 0;
        z-index: -1;
        display: block;
        width: 100%;
        height: var(--height);
        background: radial-gradient(ellipse at center, var(--buffer-color) 0%, var(--buffer-color) 30%, transparent 30%);
        background-size: var(--buffer-size) var(--buffer-size);
        background-repeat: repeat-x;
        background-position: 5px center;
        animation: buffering var(--buffer-speed) infinite;
        @include rtl() {
            animation-direction: reverse;
        }
    }
    .progress {
        display: block;
    }
}

// Animation Keyframes
// --------------------------------------------------
@mixin keyframes($animation-name) {
    @keyframes #{$animation-name} {
        @content;
    }
}

@include keyframes(indeterminate) {
    0% {
        left: -35%;
        right: 100%;
    }
    60% {
        left: 100%;
        right: -90%;
    }
    100% {
        left: 100%;
        right: -90%;
    }
}

@include keyframes(query) {
    0% {
        left: 100%;
        right: -35%;
    }
    60% {
        left: -90%;
        right: 100%;
    }
    100% {
        left: -90%;
        right: 100%;
    }
}

@include keyframes(buffering) {
    to {
        transform: translateX(10px);
    }
}