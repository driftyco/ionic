@import "../../themes/ionic.globals";
// Progress bar
// --------------------------------------------------
:host {
    /**
     * @prop --buffer-background: Background of the buffer bar
     * @prop --buffer-color: Color of the buffer circles
     * @prop --buffer-size: Size of the buffer circles
     * @prop --buffer-speed: Speed of the buffer circles
     */
    --buffer-background: rgba(0, 0, 0, .30);
    --buffer-color: currentColor;
    --buffer-size: 10px;
    --buffer-speed: 450ms;
    display: block;

    width: 100%;

    background: rgba(0, 0, 0, .12);

    contain: strict;
    overflow: hidden;
}

:host(.ion-color) {
    --buffer-background: rgba(#{current-color(base-rgb)}, .30);
    --buffer-color: #{current-color(base)};
    background: rgba(#{current-color(base-rgb)}, .12);
    color: #{current-color(base)};
}

// Set the bars to full width and height
// QUESTION: Can this be simplified?
.progress,
.progress-indeterminate,
.indeterminate-bar-primary,
.indeterminate-bar-secondary,
.buffer-circles,
.buffer-bar,
.buffer-bar:before {
    position: absolute;

    width: 100%;
    height: 100%;
}

// Determinate progress bar
// --------------------------------------------------
.progress,
.buffer-bar {
    @include transform-origin(start, top);
    transition: transform 150ms linear;
}

// Progress bar background
// --------------------------------------------------
.progress,
.progress-indeterminate {
    background: currentColor;
}

// MD based animation on indeterminate type
// --------------------------------------------------
.indeterminate-bar-primary {
    @include position(0, 0, 0, -145.166611%);
    animation: primary-indeterminate-translate 2s infinite linear;
    .progress-indeterminate {
        animation: primary-indeterminate-scale 2s infinite linear;
    }
}

.indeterminate-bar-secondary {
    @include position(0, 0, 0, -54.888891%);
    animation: secondary-indeterminate-translate 2s infinite linear;
    .progress-indeterminate {
        animation: secondary-indeterminate-scale 2s infinite linear;
    }
}

// Buffer style
// --------------------------------------------------
:host(.progress-bar-buffer) {
    background: none;
}

.buffer-bar {
    background: var(--ion-background-color, #fff);

    z-index: -1;
    &:before {
        background: var(--buffer-background);

        content: "";
    }
}

.buffer-circles {
    background: radial-gradient(ellipse at center, var(--buffer-color) 0%, var(--buffer-color) 30%, transparent 30%) repeat-x 5px center;
    background-size: var(--buffer-size) var(--buffer-size);

    z-index: -1;
    animation: buffering var(--buffer-speed) infinite linear;
}

// If reversed is set to true, the animation will be reversed
// and the bars starting at the top right
// --------------------------------------------------
:host(.progress-bar-reversed) {
    .progress,
    .buffer-bar {
        @include transform-origin(end, top);
    }
    .buffer-circles,
    .indeterminate-bar-primary,
    .indeterminate-bar-secondary,
    .progress-indeterminate {
        animation-direction: reverse;
    }
}

// Animation Keyframes
// --------------------------------------------------
// Source: https://github.com/material-components/material-components-web/blob/master/packages/mdc-linear-progress/_keyframes.scss
@keyframes primary-indeterminate-translate {
    0% {
        transform: translateX(0);
    }
    20% {
        animation-timing-function: cubic-bezier(.5, 0, .701732, .495819);

        transform: translateX(0);
    }
    59.15% {
        animation-timing-function: cubic-bezier(.302435, .381352, .55, .956352);

        transform: translateX(83.67142%);
    }
    100% {
        transform: translateX(200.611057%);
    }
}

@keyframes primary-indeterminate-scale {
    0% {
        transform: scaleX(.08);
    }
    36.65% {
        animation-timing-function: cubic-bezier(.334731, .12482, .785844, 1);

        transform: scaleX(.08);
    }
    69.15% {
        animation-timing-function: cubic-bezier(.06, .11, .6, 1);

        transform: scaleX(.661479);
    }
    100% {
        transform: scaleX(.08);
    }
}

@keyframes secondary-indeterminate-translate {
    0% {
        animation-timing-function: cubic-bezier(.15, 0, .515058, .409685);

        transform: translateX(0);
    }
    25% {
        animation-timing-function: cubic-bezier(.31033, .284058, .8, .733712);

        transform: translateX(37.651913%);
    }
    48.35% {
        animation-timing-function: cubic-bezier(.4, .627035, .6, .902026);

        transform: translateX(84.386165%);
    }
    100% {
        transform: translateX(160.277782%);
    }
}

@keyframes secondary-indeterminate-scale {
    0% {
        animation-timing-function: cubic-bezier(.205028, .057051, .57661, .453971);

        transform: scaleX(.08);
    }
    19.15% {
        animation-timing-function: cubic-bezier(.152313, .196432, .648374, 1.004315);

        transform: scaleX(.457104);
    }
    44.15% {
        animation-timing-function: cubic-bezier(.257759, -.003163, .211762, 1.38179);

        transform: scaleX(.72796);
    }
    100% {
        transform: scaleX(.08);
    }
}

@keyframes buffering {
    to {
        transform: translateX(-10px);
    }
}