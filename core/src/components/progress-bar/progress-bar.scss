@import "../../themes/ionic.globals";

// Progress bar
// --------------------------------------------------
// Host has no background by default - this will be added to the progress-background-bar
:host {
  // TODO: Check name of CSS variables
  // --progress-bar-color can also be shortened to --color (like --background) 
  // or vice versa: --background to --progress-bar-backkground
  /**
  * @prop --background: Background of the progress bar
  * @prop --progress-bar-color: Color of the progress bar
  * @prop --buffer-color: Color of the buffer circles
  * @prop --buffer-size: Size of the buffer circles
  * @prop --buffer-animation-duration: Speed of the buffer circles
  */
  --background: rgba(0, 0, 0, .2);
  --progress-bar-color: currentColor;
  --buffer-color: currentColor;
  --buffer-size: 10px;
  --buffer-animation-duration: 450ms;
  display: block;

  position: relative;

  width: 100%;

  color: var(--progress-bar-color);

  contain: strict;
  overflow: hidden;
}

:host(.ion-color) {
  --buffer-color: #{current-color(base)};
  --background: #{current-color(base, .2)};
  color: #{current-color(base)};
}

// indeterminate has no progress-background-bar, so it will be added to the host
:host(.progress-bar-indeterminate) {
  background: var(--background);
}

// Set the bars to full width and height
// QUESTION: Can this be simplified?
.progress,
.progress-indeterminate,
.indeterminate-bar-primary,
.indeterminate-bar-secondary,
.progress-background-bar,
.progress-background-bar:before,
.buffer-circles {
  position: absolute;

  width: 100%;
  height: 100%;
}

// Determinate progress bar
// --------------------------------------------------
.progress,
.progress-background-bar {
  @include transform-origin(start, top);
  transition: transform 150ms linear;
}

// Progress and background bar
// --------------------------------------------------
.progress,
.progress-indeterminate {
  background: var(--progress-bar-color);
}

.progress-background-bar {

  // It's currently here because --background has an alpha
  // Otherwise the buffer circles would be seen through
  background: #fff;

  z-index: -1; // Make it behind the progress

  &:before {
    background: var(--background);

    content: "";
  }
}

// MD based animation on indeterminate type
// --------------------------------------------------
.indeterminate-bar-primary {
  @include position(0, 0, 0, -145.166611%);
  animation: primary-indeterminate-translate 2s infinite linear;

  .progress-indeterminate {
    animation: primary-indeterminate-scale 2s infinite linear;
  }
}

.indeterminate-bar-secondary {
  @include position(0, 0, 0, -54.888891%);
  animation: secondary-indeterminate-translate 2s infinite linear;

  .progress-indeterminate {
    animation: secondary-indeterminate-scale 2s infinite linear;
  }
}

// Buffer style
// --------------------------------------------------
.buffer-circles {
  background: radial-gradient(ellipse at center, var(--buffer-color) 0%, var(--buffer-color) 30%, transparent 30%) repeat-x 5px center;
  background-size: var(--buffer-size) var(--buffer-size);

  z-index: -1;
  animation: buffering var(--buffer-animation-duration) infinite linear;
}

// If reversed is set to true, the animation will be reversed
// and the bars starting at the top right
// --------------------------------------------------
:host(.progress-bar-reversed) {
  .progress,
  .progress-background-bar {
    @include transform-origin(end, top);
  }

  .buffer-circles,
  .indeterminate-bar-primary,
  .indeterminate-bar-secondary,
  .progress-indeterminate {
    animation-direction: reverse;
  }
}

// Animation Keyframes
// --------------------------------------------------
// Source: https://github.com/material-components/material-components-web/blob/master/packages/mdc-linear-progress/_keyframes.scss
@keyframes primary-indeterminate-translate {
  0% {
    transform: translateX(0);
  }

  20% {
    animation-timing-function: cubic-bezier(.5, 0, .701732, .495819);

    transform: translateX(0);
  }

  59.15% {
    animation-timing-function: cubic-bezier(.302435, .381352, .55, .956352);

    transform: translateX(83.67142%);
  }

  100% {
    transform: translateX(200.611057%);
  }
}

@keyframes primary-indeterminate-scale {
  0% {
    transform: scaleX(.08);
  }

  36.65% {
    animation-timing-function: cubic-bezier(.334731, .12482, .785844, 1);

    transform: scaleX(.08);
  }

  69.15% {
    animation-timing-function: cubic-bezier(.06, .11, .6, 1);

    transform: scaleX(.661479);
  }

  100% {
    transform: scaleX(.08);
  }
}

@keyframes secondary-indeterminate-translate {
  0% {
    animation-timing-function: cubic-bezier(.15, 0, .515058, .409685);

    transform: translateX(0);
  }

  25% {
    animation-timing-function: cubic-bezier(.31033, .284058, .8, .733712);

    transform: translateX(37.651913%);
  }

  48.35% {
    animation-timing-function: cubic-bezier(.4, .627035, .6, .902026);

    transform: translateX(84.386165%);
  }

  100% {
    transform: translateX(160.277782%);
  }
}

@keyframes secondary-indeterminate-scale {
  0% {
    animation-timing-function: cubic-bezier(.205028, .057051, .57661, .453971);

    transform: scaleX(.08);
  }

  19.15% {
    animation-timing-function: cubic-bezier(.152313, .196432, .648374, 1.004315);

    transform: scaleX(.457104);
  }

  44.15% {
    animation-timing-function: cubic-bezier(.257759, -.003163, .211762, 1.38179);

    transform: scaleX(.72796);
  }

  100% {
    transform: scaleX(.08);
  }
}

@keyframes buffering {
  to {
    transform: translateX(-10px);
  }
}
