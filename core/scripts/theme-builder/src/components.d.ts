/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Color,
} from './components/Color';


export namespace Components {

  interface AppPreview {
    'cssText': string;
    'demoMode': string;
    'demoUrl': string;
    'hoverProperty': string;
  }
  interface AppPreviewAttributes extends StencilHTMLAttributes {
    'cssText'?: string;
    'demoMode'?: string;
    'demoUrl'?: string;
    'hoverProperty'?: string;
    'onPropertiesUsed'?: (event: CustomEvent) => void;
  }

  interface CssText {
    'cssText': string;
    'themeName': string;
  }
  interface CssTextAttributes extends StencilHTMLAttributes {
    'cssText'?: string;
    'themeName'?: string;
  }

  interface DemoSelection {
    'demoData': { name: string, url: string }[];
    'demoMode': string;
    'demoUrl': string;
  }
  interface DemoSelectionAttributes extends StencilHTMLAttributes {
    'demoData'?: { name: string, url: string }[];
    'demoMode'?: string;
    'demoUrl'?: string;
    'onDemoModeChange'?: (event: CustomEvent) => void;
    'onDemoUrlChange'?: (event: CustomEvent) => void;
  }

  interface ThemeBuilder {}
  interface ThemeBuilderAttributes extends StencilHTMLAttributes {}

  interface ThemeSelector {
    'propertiesUsed': string[];
    'themeData': { name: string }[];
  }
  interface ThemeSelectorAttributes extends StencilHTMLAttributes {
    'onPropertyHoverStart'?: (event: CustomEvent) => void;
    'onPropertyHoverStop'?: (event: CustomEvent) => void;
    'onThemeCssChange'?: (event: CustomEvent) => void;
    'propertiesUsed'?: string[];
    'themeData'?: { name: string }[];
  }

  interface VariableSelector {
    'getProperty': () => string;
    'isRgb': boolean;
    'property': string;
    'type': 'color' | 'percent';
    'usedWith': string[];
    'value': Color | string | number;
  }
  interface VariableSelectorAttributes extends StencilHTMLAttributes {
    'isRgb'?: boolean;
    'onColorChange'?: (event: CustomEvent) => void;
    'onGenerateColors'?: (event: CustomEvent) => void;
    'property'?: string;
    'type'?: 'color' | 'percent';
    'usedWith'?: string[];
    'value'?: Color | string | number;
  }
}

declare global {
  interface StencilElementInterfaces {
    'AppPreview': Components.AppPreview;
    'CssText': Components.CssText;
    'DemoSelection': Components.DemoSelection;
    'ThemeBuilder': Components.ThemeBuilder;
    'ThemeSelector': Components.ThemeSelector;
    'VariableSelector': Components.VariableSelector;
  }

  interface StencilIntrinsicElements {
    'app-preview': Components.AppPreviewAttributes;
    'css-text': Components.CssTextAttributes;
    'demo-selection': Components.DemoSelectionAttributes;
    'theme-builder': Components.ThemeBuilderAttributes;
    'theme-selector': Components.ThemeSelectorAttributes;
    'variable-selector': Components.VariableSelectorAttributes;
  }


  interface HTMLAppPreviewElement extends Components.AppPreview, HTMLStencilElement {}
  var HTMLAppPreviewElement: {
    prototype: HTMLAppPreviewElement;
    new (): HTMLAppPreviewElement;
  };

  interface HTMLCssTextElement extends Components.CssText, HTMLStencilElement {}
  var HTMLCssTextElement: {
    prototype: HTMLCssTextElement;
    new (): HTMLCssTextElement;
  };

  interface HTMLDemoSelectionElement extends Components.DemoSelection, HTMLStencilElement {}
  var HTMLDemoSelectionElement: {
    prototype: HTMLDemoSelectionElement;
    new (): HTMLDemoSelectionElement;
  };

  interface HTMLThemeBuilderElement extends Components.ThemeBuilder, HTMLStencilElement {}
  var HTMLThemeBuilderElement: {
    prototype: HTMLThemeBuilderElement;
    new (): HTMLThemeBuilderElement;
  };

  interface HTMLThemeSelectorElement extends Components.ThemeSelector, HTMLStencilElement {}
  var HTMLThemeSelectorElement: {
    prototype: HTMLThemeSelectorElement;
    new (): HTMLThemeSelectorElement;
  };

  interface HTMLVariableSelectorElement extends Components.VariableSelector, HTMLStencilElement {}
  var HTMLVariableSelectorElement: {
    prototype: HTMLVariableSelectorElement;
    new (): HTMLVariableSelectorElement;
  };

  interface HTMLElementTagNameMap {
    'app-preview': HTMLAppPreviewElement
    'css-text': HTMLCssTextElement
    'demo-selection': HTMLDemoSelectionElement
    'theme-builder': HTMLThemeBuilderElement
    'theme-selector': HTMLThemeSelectorElement
    'variable-selector': HTMLVariableSelectorElement
  }

  interface ElementTagNameMap {
    'app-preview': HTMLAppPreviewElement;
    'css-text': HTMLCssTextElement;
    'demo-selection': HTMLDemoSelectionElement;
    'theme-builder': HTMLThemeBuilderElement;
    'theme-selector': HTMLThemeSelectorElement;
    'variable-selector': HTMLVariableSelectorElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
